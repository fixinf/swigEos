# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_eosWrap', [dirname(__file__)])
        except ImportError:
            import _eosWrap
            return _eosWrap
        if fp is not None:
            try:
                _mod = imp.load_module('_eosWrap', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _eosWrap = swig_import_helper()
    del swig_import_helper
else:
    import _eosWrap
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _eosWrap.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _eosWrap.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _eosWrap.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _eosWrap.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _eosWrap.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _eosWrap.SwigPyIterator_equal(self, x)

    def copy(self):
        return _eosWrap.SwigPyIterator_copy(self)

    def next(self):
        return _eosWrap.SwigPyIterator_next(self)

    def __next__(self):
        return _eosWrap.SwigPyIterator___next__(self)

    def previous(self):
        return _eosWrap.SwigPyIterator_previous(self)

    def advance(self, n):
        return _eosWrap.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _eosWrap.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _eosWrap.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _eosWrap.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _eosWrap.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _eosWrap.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _eosWrap.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _eosWrap.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _eosWrap.vec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _eosWrap.vec___nonzero__(self)

    def __bool__(self):
        return _eosWrap.vec___bool__(self)

    def __len__(self):
        return _eosWrap.vec___len__(self)

    def __getslice__(self, i, j):
        return _eosWrap.vec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _eosWrap.vec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _eosWrap.vec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _eosWrap.vec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _eosWrap.vec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _eosWrap.vec___setitem__(self, *args)

    def pop(self):
        return _eosWrap.vec_pop(self)

    def append(self, x):
        return _eosWrap.vec_append(self, x)

    def empty(self):
        return _eosWrap.vec_empty(self)

    def size(self):
        return _eosWrap.vec_size(self)

    def swap(self, v):
        return _eosWrap.vec_swap(self, v)

    def begin(self):
        return _eosWrap.vec_begin(self)

    def end(self):
        return _eosWrap.vec_end(self)

    def rbegin(self):
        return _eosWrap.vec_rbegin(self)

    def rend(self):
        return _eosWrap.vec_rend(self)

    def clear(self):
        return _eosWrap.vec_clear(self)

    def get_allocator(self):
        return _eosWrap.vec_get_allocator(self)

    def pop_back(self):
        return _eosWrap.vec_pop_back(self)

    def erase(self, *args):
        return _eosWrap.vec_erase(self, *args)

    def __init__(self, *args):
        this = _eosWrap.new_vec(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _eosWrap.vec_push_back(self, x)

    def front(self):
        return _eosWrap.vec_front(self)

    def back(self):
        return _eosWrap.vec_back(self)

    def assign(self, n, x):
        return _eosWrap.vec_assign(self, n, x)

    def resize(self, *args):
        return _eosWrap.vec_resize(self, *args)

    def insert(self, *args):
        return _eosWrap.vec_insert(self, *args)

    def reserve(self, n):
        return _eosWrap.vec_reserve(self, n)

    def capacity(self):
        return _eosWrap.vec_capacity(self)
    __swig_destroy__ = _eosWrap.delete_vec
    __del__ = lambda self: None
vec_swigregister = _eosWrap.vec_swigregister
vec_swigregister(vec)

class dArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _eosWrap.new_dArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _eosWrap.delete_dArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _eosWrap.dArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _eosWrap.dArray___setitem__(self, index, value)

    def cast(self):
        return _eosWrap.dArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _eosWrap.dArray_frompointer
    if _newclass:
        frompointer = staticmethod(_eosWrap.dArray_frompointer)
dArray_swigregister = _eosWrap.dArray_swigregister
dArray_swigregister(dArray)

def dArray_frompointer(t):
    return _eosWrap.dArray_frompointer(t)
dArray_frompointer = _eosWrap.dArray_frompointer


def stepE(n, init, f_init, out, iter, arg6):
    return _eosWrap.stepE(n, init, f_init, out, iter, arg6)
stepE = _eosWrap.stepE

def potentials(n, out, C):
    return _eosWrap.potentials(n, out, C)
potentials = _eosWrap.potentials

def _E(n, arg2, inplace=None):
    return _eosWrap._E(n, arg2, inplace)
_E = _eosWrap._E

def E(n, arg2, inplace=None):
    return _eosWrap.E(n, arg2, inplace)
E = _eosWrap.E

def E_rho(n, mu_c, C, inplace=None):
    return _eosWrap.E_rho(n, mu_c, C, inplace)
E_rho = _eosWrap.E_rho

def sum(x):
    return _eosWrap.sum(x)
sum = _eosWrap.sum

def kineticInt(n, m, f):
    return _eosWrap.kineticInt(n, m, f)
kineticInt = _eosWrap.kineticInt

def p_f(n, gamma):
    return _eosWrap.p_f(n, gamma)
p_f = _eosWrap.p_f

def mu(n, i, C):
    return _eosWrap.mu(n, i, C)
mu = _eosWrap.mu

def mu_deriv(n, i, C):
    return _eosWrap.mu_deriv(n, i, C)
mu_deriv = _eosWrap.mu_deriv

def sumTest(arg1):
    return _eosWrap.sumTest(arg1)
sumTest = _eosWrap.sumTest

def sumTest2(arg1, in2):
    return _eosWrap.sumTest2(arg1, in2)
sumTest2 = _eosWrap.sumTest2

def solveF(n, E, P, init, out, C):
    return _eosWrap.solveF(n, E, P, init, out, C)
solveF = _eosWrap.solveF
class var(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, var, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, var, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _eosWrap.var_n_set
    __swig_getmethods__["n"] = _eosWrap.var_n_get
    if _newclass:
        n = _swig_property(_eosWrap.var_n_get, _eosWrap.var_n_set)
    __swig_setmethods__["f"] = _eosWrap.var_f_set
    __swig_getmethods__["f"] = _eosWrap.var_f_get
    if _newclass:
        f = _swig_property(_eosWrap.var_f_get, _eosWrap.var_f_set)

    def __init__(self):
        this = _eosWrap.new_var()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _eosWrap.delete_var
    __del__ = lambda self: None
var_swigregister = _eosWrap.var_swigregister
var_swigregister(var)

class set_const(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, set_const, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, set_const, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def init(self, arg2, arg3, arg4, arg5, arg6):
        return _eosWrap.set_const_init(self, arg2, arg3, arg4, arg5, arg6)

    def diff_phi_n(self, arg2):
        return _eosWrap.set_const_diff_phi_n(self, arg2)

    def set(self, p, dimP):
        return _eosWrap.set_const_set(self, p, dimP)

    def U(self, arg2):
        return _eosWrap.set_const_U(self, arg2)

    def dU(self, arg2):
        return _eosWrap.set_const_dU(self, arg2)

    def set_name(self, name):
        return _eosWrap.set_const_set_name(self, name)

    def phi_n(self, arg2, arg3):
        return _eosWrap.set_const_phi_n(self, arg2, arg3)

    def eta_s(self, arg2):
        return _eosWrap.set_const_eta_s(self, arg2)

    def eta_o(self, arg2):
        return _eosWrap.set_const_eta_o(self, arg2)

    def eta_r(self, arg2):
        return _eosWrap.set_const_eta_r(self, arg2)

    def eta_p(self, arg2):
        return _eosWrap.set_const_eta_p(self, arg2)
    __swig_setmethods__["Cs"] = _eosWrap.set_const_Cs_set
    __swig_getmethods__["Cs"] = _eosWrap.set_const_Cs_get
    if _newclass:
        Cs = _swig_property(_eosWrap.set_const_Cs_get, _eosWrap.set_const_Cs_set)
    __swig_setmethods__["Co"] = _eosWrap.set_const_Co_set
    __swig_getmethods__["Co"] = _eosWrap.set_const_Co_get
    if _newclass:
        Co = _swig_property(_eosWrap.set_const_Co_get, _eosWrap.set_const_Co_set)
    __swig_setmethods__["Cr"] = _eosWrap.set_const_Cr_set
    __swig_getmethods__["Cr"] = _eosWrap.set_const_Cr_get
    if _newclass:
        Cr = _swig_property(_eosWrap.set_const_Cr_get, _eosWrap.set_const_Cr_set)
    __swig_setmethods__["Csp"] = _eosWrap.set_const_Csp_set
    __swig_getmethods__["Csp"] = _eosWrap.set_const_Csp_get
    if _newclass:
        Csp = _swig_property(_eosWrap.set_const_Csp_get, _eosWrap.set_const_Csp_set)
    __swig_setmethods__["name"] = _eosWrap.set_const_name_set
    __swig_getmethods__["name"] = _eosWrap.set_const_name_get
    if _newclass:
        name = _swig_property(_eosWrap.set_const_name_get, _eosWrap.set_const_name_set)
    __swig_setmethods__["b"] = _eosWrap.set_const_b_set
    __swig_getmethods__["b"] = _eosWrap.set_const_b_get
    if _newclass:
        b = _swig_property(_eosWrap.set_const_b_get, _eosWrap.set_const_b_set)
    __swig_setmethods__["c"] = _eosWrap.set_const_c_set
    __swig_getmethods__["c"] = _eosWrap.set_const_c_get
    if _newclass:
        c = _swig_property(_eosWrap.set_const_c_get, _eosWrap.set_const_c_set)
    __swig_setmethods__["f0"] = _eosWrap.set_const_f0_set
    __swig_getmethods__["f0"] = _eosWrap.set_const_f0_get
    if _newclass:
        f0 = _swig_property(_eosWrap.set_const_f0_get, _eosWrap.set_const_f0_set)
    __swig_setmethods__["m_rho"] = _eosWrap.set_const_m_rho_set
    __swig_getmethods__["m_rho"] = _eosWrap.set_const_m_rho_get
    if _newclass:
        m_rho = _swig_property(_eosWrap.set_const_m_rho_get, _eosWrap.set_const_m_rho_set)
    __swig_setmethods__["exp_alpha"] = _eosWrap.set_const_exp_alpha_set
    __swig_getmethods__["exp_alpha"] = _eosWrap.set_const_exp_alpha_get
    if _newclass:
        exp_alpha = _swig_property(_eosWrap.set_const_exp_alpha_get, _eosWrap.set_const_exp_alpha_set)
    __swig_setmethods__["X_s"] = _eosWrap.set_const_X_s_set
    __swig_getmethods__["X_s"] = _eosWrap.set_const_X_s_get
    if _newclass:
        X_s = _swig_property(_eosWrap.set_const_X_s_get, _eosWrap.set_const_X_s_set)
    __swig_setmethods__["X_o"] = _eosWrap.set_const_X_o_set
    __swig_getmethods__["X_o"] = _eosWrap.set_const_X_o_get
    if _newclass:
        X_o = _swig_property(_eosWrap.set_const_X_o_get, _eosWrap.set_const_X_o_set)
    __swig_setmethods__["X_p"] = _eosWrap.set_const_X_p_set
    __swig_getmethods__["X_p"] = _eosWrap.set_const_X_p_get
    if _newclass:
        X_p = _swig_property(_eosWrap.set_const_X_p_get, _eosWrap.set_const_X_p_set)
    __swig_setmethods__["hs_z"] = _eosWrap.set_const_hs_z_set
    __swig_getmethods__["hs_z"] = _eosWrap.set_const_hs_z_get
    if _newclass:
        hs_z = _swig_property(_eosWrap.set_const_hs_z_get, _eosWrap.set_const_hs_z_set)
    __swig_setmethods__["hs_alpha"] = _eosWrap.set_const_hs_alpha_set
    __swig_getmethods__["hs_alpha"] = _eosWrap.set_const_hs_alpha_get
    if _newclass:
        hs_alpha = _swig_property(_eosWrap.set_const_hs_alpha_get, _eosWrap.set_const_hs_alpha_set)
    __swig_setmethods__["X_r"] = _eosWrap.set_const_X_r_set
    __swig_getmethods__["X_r"] = _eosWrap.set_const_X_r_get
    if _newclass:
        X_r = _swig_property(_eosWrap.set_const_X_r_get, _eosWrap.set_const_X_r_set)
    __swig_setmethods__["X_sp"] = _eosWrap.set_const_X_sp_set
    __swig_getmethods__["X_sp"] = _eosWrap.set_const_X_sp_get
    if _newclass:
        X_sp = _swig_property(_eosWrap.set_const_X_sp_get, _eosWrap.set_const_X_sp_set)
    __swig_setmethods__["Q"] = _eosWrap.set_const_Q_set
    __swig_getmethods__["Q"] = _eosWrap.set_const_Q_get
    if _newclass:
        Q = _swig_property(_eosWrap.set_const_Q_get, _eosWrap.set_const_Q_set)
    __swig_setmethods__["T"] = _eosWrap.set_const_T_set
    __swig_getmethods__["T"] = _eosWrap.set_const_T_get
    if _newclass:
        T = _swig_property(_eosWrap.set_const_T_get, _eosWrap.set_const_T_set)
    __swig_setmethods__["S"] = _eosWrap.set_const_S_set
    __swig_getmethods__["S"] = _eosWrap.set_const_S_get
    if _newclass:
        S = _swig_property(_eosWrap.set_const_S_get, _eosWrap.set_const_S_set)
    __swig_setmethods__["M"] = _eosWrap.set_const_M_set
    __swig_getmethods__["M"] = _eosWrap.set_const_M_get
    if _newclass:
        M = _swig_property(_eosWrap.set_const_M_get, _eosWrap.set_const_M_set)
    __swig_setmethods__["Hyper"] = _eosWrap.set_const_Hyper_set
    __swig_getmethods__["Hyper"] = _eosWrap.set_const_Hyper_get
    if _newclass:
        Hyper = _swig_property(_eosWrap.set_const_Hyper_get, _eosWrap.set_const_Hyper_set)

    def SetHyperConstants(self, arg2):
        return _eosWrap.set_const_SetHyperConstants(self, arg2)

    def repr(self):
        return _eosWrap.set_const_repr(self)
    __swig_setmethods__["phi_meson"] = _eosWrap.set_const_phi_meson_set
    __swig_getmethods__["phi_meson"] = _eosWrap.set_const_phi_meson_get
    if _newclass:
        phi_meson = _swig_property(_eosWrap.set_const_phi_meson_get, _eosWrap.set_const_phi_meson_set)
    __swig_setmethods__["n0"] = _eosWrap.set_const_n0_set
    __swig_getmethods__["n0"] = _eosWrap.set_const_n0_get
    if _newclass:
        n0 = _swig_property(_eosWrap.set_const_n0_get, _eosWrap.set_const_n0_set)
    __swig_setmethods__["sprime"] = _eosWrap.set_const_sprime_set
    __swig_getmethods__["sprime"] = _eosWrap.set_const_sprime_get
    if _newclass:
        sprime = _swig_property(_eosWrap.set_const_sprime_get, _eosWrap.set_const_sprime_set)

    def set_xo(self, x):
        return _eosWrap.set_const_set_xo(self, x)

    def set_xr(self, x):
        return _eosWrap.set_const_set_xr(self, x)

    def set_xp(self, x):
        return _eosWrap.set_const_set_xp(self, x)

    def set_xs(self, x):
        return _eosWrap.set_const_set_xs(self, x)

    def func(self, x):
        return _eosWrap.set_const_func(self, x)

    def Xs(self, i, f):
        return _eosWrap.set_const_Xs(self, i, f)

    def set_hs_z(self, x):
        return _eosWrap.set_const_set_hs_z(self, x)

    def set_hs_alpha(self, x):
        return _eosWrap.set_const_set_hs_alpha(self, x)
    __swig_setmethods__["sigma_kind"] = _eosWrap.set_const_sigma_kind_set
    __swig_getmethods__["sigma_kind"] = _eosWrap.set_const_sigma_kind_get
    if _newclass:
        sigma_kind = _swig_property(_eosWrap.set_const_sigma_kind_get, _eosWrap.set_const_sigma_kind_set)
    __swig_setmethods__["muons"] = _eosWrap.set_const_muons_set
    __swig_getmethods__["muons"] = _eosWrap.set_const_muons_get
    if _newclass:
        muons = _swig_property(_eosWrap.set_const_muons_get, _eosWrap.set_const_muons_set)
    __swig_setmethods__["fmax"] = _eosWrap.set_const_fmax_set
    __swig_getmethods__["fmax"] = _eosWrap.set_const_fmax_get
    if _newclass:
        fmax = _swig_property(_eosWrap.set_const_fmax_get, _eosWrap.set_const_fmax_set)
    __swig_setmethods__["hyper_sigma_kind"] = _eosWrap.set_const_hyper_sigma_kind_set
    __swig_getmethods__["hyper_sigma_kind"] = _eosWrap.set_const_hyper_sigma_kind_get
    if _newclass:
        hyper_sigma_kind = _swig_property(_eosWrap.set_const_hyper_sigma_kind_get, _eosWrap.set_const_hyper_sigma_kind_set)
    __swig_destroy__ = _eosWrap.delete_set_const
    __del__ = lambda self: None
set_const_swigregister = _eosWrap.set_const_swigregister
set_const_swigregister(set_const)

class KVOR(set_const):
    __swig_setmethods__ = {}
    for _s in [set_const]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KVOR, name, value)
    __swig_getmethods__ = {}
    for _s in [set_const]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KVOR, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _eosWrap.new_KVOR()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _eosWrap.delete_KVOR
    __del__ = lambda self: None
    __swig_setmethods__["z"] = _eosWrap.KVOR_z_set
    __swig_getmethods__["z"] = _eosWrap.KVOR_z_get
    if _newclass:
        z = _swig_property(_eosWrap.KVOR_z_get, _eosWrap.KVOR_z_set)

    def eta_o(self, arg2):
        return _eosWrap.KVOR_eta_o(self, arg2)

    def eta_r(self, arg2):
        return _eosWrap.KVOR_eta_r(self, arg2)

    def eta_s(self, arg2):
        return _eosWrap.KVOR_eta_s(self, arg2)

    def phi_n(self, arg2, arg3):
        return _eosWrap.KVOR_phi_n(self, arg2, arg3)

    def eta_p(self, arg2):
        return _eosWrap.KVOR_eta_p(self, arg2)

    def U(self, arg2):
        return _eosWrap.KVOR_U(self, arg2)
    __swig_setmethods__["phi_kind"] = _eosWrap.KVOR_phi_kind_set
    __swig_getmethods__["phi_kind"] = _eosWrap.KVOR_phi_kind_get
    if _newclass:
        phi_kind = _swig_property(_eosWrap.KVOR_phi_kind_get, _eosWrap.KVOR_phi_kind_set)
KVOR_swigregister = _eosWrap.KVOR_swigregister
KVOR_swigregister(KVOR)

class KVORphi(KVOR):
    __swig_setmethods__ = {}
    for _s in [KVOR]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KVORphi, name, value)
    __swig_getmethods__ = {}
    for _s in [KVOR]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KVORphi, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _eosWrap.new_KVORphi()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["phi_kind"] = _eosWrap.KVORphi_phi_kind_set
    __swig_getmethods__["phi_kind"] = _eosWrap.KVORphi_phi_kind_get
    if _newclass:
        phi_kind = _swig_property(_eosWrap.KVORphi_phi_kind_get, _eosWrap.KVORphi_phi_kind_set)

    def eta_p(self, f):
        return _eosWrap.KVORphi_eta_p(self, f)
    __swig_destroy__ = _eosWrap.delete_KVORphi
    __del__ = lambda self: None
KVORphi_swigregister = _eosWrap.KVORphi_swigregister
KVORphi_swigregister(KVORphi)

class KVOR_MD(KVOR):
    __swig_setmethods__ = {}
    for _s in [KVOR]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KVOR_MD, name, value)
    __swig_getmethods__ = {}
    for _s in [KVOR]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KVOR_MD, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _eosWrap.new_KVOR_MD()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def eta_o(self, f):
        return _eosWrap.KVOR_MD_eta_o(self, f)

    def eta_r(self, f):
        return _eosWrap.KVOR_MD_eta_r(self, f)

    def eta_s(self, f):
        return _eosWrap.KVOR_MD_eta_s(self, f)
    __swig_setmethods__["b_sigma"] = _eosWrap.KVOR_MD_b_sigma_set
    __swig_getmethods__["b_sigma"] = _eosWrap.KVOR_MD_b_sigma_get
    if _newclass:
        b_sigma = _swig_property(_eosWrap.KVOR_MD_b_sigma_get, _eosWrap.KVOR_MD_b_sigma_set)
    __swig_setmethods__["om_prime"] = _eosWrap.KVOR_MD_om_prime_set
    __swig_getmethods__["om_prime"] = _eosWrap.KVOR_MD_om_prime_get
    if _newclass:
        om_prime = _swig_property(_eosWrap.KVOR_MD_om_prime_get, _eosWrap.KVOR_MD_om_prime_set)
    __swig_setmethods__["rho_prime"] = _eosWrap.KVOR_MD_rho_prime_set
    __swig_getmethods__["rho_prime"] = _eosWrap.KVOR_MD_rho_prime_get
    if _newclass:
        rho_prime = _swig_property(_eosWrap.KVOR_MD_rho_prime_get, _eosWrap.KVOR_MD_rho_prime_set)
    __swig_setmethods__["b_om"] = _eosWrap.KVOR_MD_b_om_set
    __swig_getmethods__["b_om"] = _eosWrap.KVOR_MD_b_om_get
    if _newclass:
        b_om = _swig_property(_eosWrap.KVOR_MD_b_om_get, _eosWrap.KVOR_MD_b_om_set)
    __swig_setmethods__["b_rho"] = _eosWrap.KVOR_MD_b_rho_set
    __swig_getmethods__["b_rho"] = _eosWrap.KVOR_MD_b_rho_get
    if _newclass:
        b_rho = _swig_property(_eosWrap.KVOR_MD_b_rho_get, _eosWrap.KVOR_MD_b_rho_set)
    __swig_destroy__ = _eosWrap.delete_KVOR_MD
    __del__ = lambda self: None
KVOR_MD_swigregister = _eosWrap.KVOR_MD_swigregister
KVOR_MD_swigregister(KVOR_MD)

class KVOR_mod(KVOR):
    __swig_setmethods__ = {}
    for _s in [KVOR]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KVOR_mod, name, value)
    __swig_getmethods__ = {}
    for _s in [KVOR]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KVOR_mod, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _eosWrap.new_KVOR_mod()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _eosWrap.delete_KVOR_mod
    __del__ = lambda self: None
    __swig_setmethods__["omega_f"] = _eosWrap.KVOR_mod_omega_f_set
    __swig_getmethods__["omega_f"] = _eosWrap.KVOR_mod_omega_f_get
    if _newclass:
        omega_f = _swig_property(_eosWrap.KVOR_mod_omega_f_get, _eosWrap.KVOR_mod_omega_f_set)
    __swig_setmethods__["omega_a"] = _eosWrap.KVOR_mod_omega_a_set
    __swig_getmethods__["omega_a"] = _eosWrap.KVOR_mod_omega_a_get
    if _newclass:
        omega_a = _swig_property(_eosWrap.KVOR_mod_omega_a_get, _eosWrap.KVOR_mod_omega_a_set)
    __swig_setmethods__["d"] = _eosWrap.KVOR_mod_d_set
    __swig_getmethods__["d"] = _eosWrap.KVOR_mod_d_get
    if _newclass:
        d = _swig_property(_eosWrap.KVOR_mod_d_get, _eosWrap.KVOR_mod_d_set)
    __swig_setmethods__["e"] = _eosWrap.KVOR_mod_e_set
    __swig_getmethods__["e"] = _eosWrap.KVOR_mod_e_get
    if _newclass:
        e = _swig_property(_eosWrap.KVOR_mod_e_get, _eosWrap.KVOR_mod_e_set)
    __swig_setmethods__["rho_f"] = _eosWrap.KVOR_mod_rho_f_set
    __swig_getmethods__["rho_f"] = _eosWrap.KVOR_mod_rho_f_get
    if _newclass:
        rho_f = _swig_property(_eosWrap.KVOR_mod_rho_f_get, _eosWrap.KVOR_mod_rho_f_set)
    __swig_setmethods__["rho_a"] = _eosWrap.KVOR_mod_rho_a_set
    __swig_getmethods__["rho_a"] = _eosWrap.KVOR_mod_rho_a_get
    if _newclass:
        rho_a = _swig_property(_eosWrap.KVOR_mod_rho_a_get, _eosWrap.KVOR_mod_rho_a_set)
    __swig_setmethods__["beta"] = _eosWrap.KVOR_mod_beta_set
    __swig_getmethods__["beta"] = _eosWrap.KVOR_mod_beta_get
    if _newclass:
        beta = _swig_property(_eosWrap.KVOR_mod_beta_get, _eosWrap.KVOR_mod_beta_set)
    __swig_setmethods__["alpha"] = _eosWrap.KVOR_mod_alpha_set
    __swig_getmethods__["alpha"] = _eosWrap.KVOR_mod_alpha_get
    if _newclass:
        alpha = _swig_property(_eosWrap.KVOR_mod_alpha_get, _eosWrap.KVOR_mod_alpha_set)
    __swig_setmethods__["gamma"] = _eosWrap.KVOR_mod_gamma_set
    __swig_getmethods__["gamma"] = _eosWrap.KVOR_mod_gamma_get
    if _newclass:
        gamma = _swig_property(_eosWrap.KVOR_mod_gamma_get, _eosWrap.KVOR_mod_gamma_set)
    __swig_setmethods__["phi_f"] = _eosWrap.KVOR_mod_phi_f_set
    __swig_getmethods__["phi_f"] = _eosWrap.KVOR_mod_phi_f_get
    if _newclass:
        phi_f = _swig_property(_eosWrap.KVOR_mod_phi_f_get, _eosWrap.KVOR_mod_phi_f_set)
    __swig_setmethods__["phi_a"] = _eosWrap.KVOR_mod_phi_a_set
    __swig_getmethods__["phi_a"] = _eosWrap.KVOR_mod_phi_a_get
    if _newclass:
        phi_a = _swig_property(_eosWrap.KVOR_mod_phi_a_get, _eosWrap.KVOR_mod_phi_a_set)
    __swig_setmethods__["phi_gamma"] = _eosWrap.KVOR_mod_phi_gamma_set
    __swig_getmethods__["phi_gamma"] = _eosWrap.KVOR_mod_phi_gamma_get
    if _newclass:
        phi_gamma = _swig_property(_eosWrap.KVOR_mod_phi_gamma_get, _eosWrap.KVOR_mod_phi_gamma_set)
    __swig_setmethods__["phi_z"] = _eosWrap.KVOR_mod_phi_z_set
    __swig_getmethods__["phi_z"] = _eosWrap.KVOR_mod_phi_z_get
    if _newclass:
        phi_z = _swig_property(_eosWrap.KVOR_mod_phi_z_get, _eosWrap.KVOR_mod_phi_z_set)
    __swig_setmethods__["omega_c"] = _eosWrap.KVOR_mod_omega_c_set
    __swig_getmethods__["omega_c"] = _eosWrap.KVOR_mod_omega_c_get
    if _newclass:
        omega_c = _swig_property(_eosWrap.KVOR_mod_omega_c_get, _eosWrap.KVOR_mod_omega_c_set)

    def eta_o(self, arg2):
        return _eosWrap.KVOR_mod_eta_o(self, arg2)

    def eta_r(self, arg2):
        return _eosWrap.KVOR_mod_eta_r(self, arg2)

    def eta_s(self, arg2):
        return _eosWrap.KVOR_mod_eta_s(self, arg2)

    def eta_p(self, arg2):
        return _eosWrap.KVOR_mod_eta_p(self, arg2)

    def phi_n(self, arg2, arg3):
        return _eosWrap.KVOR_mod_phi_n(self, arg2, arg3)

    def U(self, arg2):
        return _eosWrap.KVOR_mod_U(self, arg2)
KVOR_mod_swigregister = _eosWrap.KVOR_mod_swigregister
KVOR_mod_swigregister(KVOR_mod)

class KVOR_mod2(KVOR_mod):
    __swig_setmethods__ = {}
    for _s in [KVOR_mod]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KVOR_mod2, name, value)
    __swig_getmethods__ = {}
    for _s in [KVOR_mod]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KVOR_mod2, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _eosWrap.new_KVOR_mod2()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _eosWrap.delete_KVOR_mod2
    __del__ = lambda self: None
    __swig_setmethods__["omega_f"] = _eosWrap.KVOR_mod2_omega_f_set
    __swig_getmethods__["omega_f"] = _eosWrap.KVOR_mod2_omega_f_get
    if _newclass:
        omega_f = _swig_property(_eosWrap.KVOR_mod2_omega_f_get, _eosWrap.KVOR_mod2_omega_f_set)
    __swig_setmethods__["omega_a"] = _eosWrap.KVOR_mod2_omega_a_set
    __swig_getmethods__["omega_a"] = _eosWrap.KVOR_mod2_omega_a_get
    if _newclass:
        omega_a = _swig_property(_eosWrap.KVOR_mod2_omega_a_get, _eosWrap.KVOR_mod2_omega_a_set)
    __swig_setmethods__["d"] = _eosWrap.KVOR_mod2_d_set
    __swig_getmethods__["d"] = _eosWrap.KVOR_mod2_d_get
    if _newclass:
        d = _swig_property(_eosWrap.KVOR_mod2_d_get, _eosWrap.KVOR_mod2_d_set)
    __swig_setmethods__["e"] = _eosWrap.KVOR_mod2_e_set
    __swig_getmethods__["e"] = _eosWrap.KVOR_mod2_e_get
    if _newclass:
        e = _swig_property(_eosWrap.KVOR_mod2_e_get, _eosWrap.KVOR_mod2_e_set)
    __swig_setmethods__["rho_f"] = _eosWrap.KVOR_mod2_rho_f_set
    __swig_getmethods__["rho_f"] = _eosWrap.KVOR_mod2_rho_f_get
    if _newclass:
        rho_f = _swig_property(_eosWrap.KVOR_mod2_rho_f_get, _eosWrap.KVOR_mod2_rho_f_set)
    __swig_setmethods__["rho_a"] = _eosWrap.KVOR_mod2_rho_a_set
    __swig_getmethods__["rho_a"] = _eosWrap.KVOR_mod2_rho_a_get
    if _newclass:
        rho_a = _swig_property(_eosWrap.KVOR_mod2_rho_a_get, _eosWrap.KVOR_mod2_rho_a_set)
    __swig_setmethods__["rho_val"] = _eosWrap.KVOR_mod2_rho_val_set
    __swig_getmethods__["rho_val"] = _eosWrap.KVOR_mod2_rho_val_get
    if _newclass:
        rho_val = _swig_property(_eosWrap.KVOR_mod2_rho_val_get, _eosWrap.KVOR_mod2_rho_val_set)
    __swig_setmethods__["beta"] = _eosWrap.KVOR_mod2_beta_set
    __swig_getmethods__["beta"] = _eosWrap.KVOR_mod2_beta_get
    if _newclass:
        beta = _swig_property(_eosWrap.KVOR_mod2_beta_get, _eosWrap.KVOR_mod2_beta_set)
    __swig_setmethods__["alpha"] = _eosWrap.KVOR_mod2_alpha_set
    __swig_getmethods__["alpha"] = _eosWrap.KVOR_mod2_alpha_get
    if _newclass:
        alpha = _swig_property(_eosWrap.KVOR_mod2_alpha_get, _eosWrap.KVOR_mod2_alpha_set)
    __swig_setmethods__["gamma"] = _eosWrap.KVOR_mod2_gamma_set
    __swig_getmethods__["gamma"] = _eosWrap.KVOR_mod2_gamma_get
    if _newclass:
        gamma = _swig_property(_eosWrap.KVOR_mod2_gamma_get, _eosWrap.KVOR_mod2_gamma_set)
    __swig_setmethods__["beta2"] = _eosWrap.KVOR_mod2_beta2_set
    __swig_getmethods__["beta2"] = _eosWrap.KVOR_mod2_beta2_get
    if _newclass:
        beta2 = _swig_property(_eosWrap.KVOR_mod2_beta2_get, _eosWrap.KVOR_mod2_beta2_set)
    __swig_setmethods__["gamma2"] = _eosWrap.KVOR_mod2_gamma2_set
    __swig_getmethods__["gamma2"] = _eosWrap.KVOR_mod2_gamma2_get
    if _newclass:
        gamma2 = _swig_property(_eosWrap.KVOR_mod2_gamma2_get, _eosWrap.KVOR_mod2_gamma2_set)
    __swig_setmethods__["phi_f"] = _eosWrap.KVOR_mod2_phi_f_set
    __swig_getmethods__["phi_f"] = _eosWrap.KVOR_mod2_phi_f_get
    if _newclass:
        phi_f = _swig_property(_eosWrap.KVOR_mod2_phi_f_get, _eosWrap.KVOR_mod2_phi_f_set)
    __swig_setmethods__["phi_a"] = _eosWrap.KVOR_mod2_phi_a_set
    __swig_getmethods__["phi_a"] = _eosWrap.KVOR_mod2_phi_a_get
    if _newclass:
        phi_a = _swig_property(_eosWrap.KVOR_mod2_phi_a_get, _eosWrap.KVOR_mod2_phi_a_set)
    __swig_setmethods__["phi_gamma"] = _eosWrap.KVOR_mod2_phi_gamma_set
    __swig_getmethods__["phi_gamma"] = _eosWrap.KVOR_mod2_phi_gamma_get
    if _newclass:
        phi_gamma = _swig_property(_eosWrap.KVOR_mod2_phi_gamma_get, _eosWrap.KVOR_mod2_phi_gamma_set)
    __swig_setmethods__["phi_z"] = _eosWrap.KVOR_mod2_phi_z_set
    __swig_getmethods__["phi_z"] = _eosWrap.KVOR_mod2_phi_z_get
    if _newclass:
        phi_z = _swig_property(_eosWrap.KVOR_mod2_phi_z_get, _eosWrap.KVOR_mod2_phi_z_set)
    __swig_setmethods__["rho_sat_val"] = _eosWrap.KVOR_mod2_rho_sat_val_set
    __swig_getmethods__["rho_sat_val"] = _eosWrap.KVOR_mod2_rho_sat_val_get
    if _newclass:
        rho_sat_val = _swig_property(_eosWrap.KVOR_mod2_rho_sat_val_get, _eosWrap.KVOR_mod2_rho_sat_val_set)
    __swig_setmethods__["rho_sat_a"] = _eosWrap.KVOR_mod2_rho_sat_a_set
    __swig_getmethods__["rho_sat_a"] = _eosWrap.KVOR_mod2_rho_sat_a_get
    if _newclass:
        rho_sat_a = _swig_property(_eosWrap.KVOR_mod2_rho_sat_a_get, _eosWrap.KVOR_mod2_rho_sat_a_set)
    __swig_setmethods__["rho_sat_f1"] = _eosWrap.KVOR_mod2_rho_sat_f1_set
    __swig_getmethods__["rho_sat_f1"] = _eosWrap.KVOR_mod2_rho_sat_f1_get
    if _newclass:
        rho_sat_f1 = _swig_property(_eosWrap.KVOR_mod2_rho_sat_f1_get, _eosWrap.KVOR_mod2_rho_sat_f1_set)
    __swig_setmethods__["rho_sat_f2"] = _eosWrap.KVOR_mod2_rho_sat_f2_set
    __swig_getmethods__["rho_sat_f2"] = _eosWrap.KVOR_mod2_rho_sat_f2_get
    if _newclass:
        rho_sat_f2 = _swig_property(_eosWrap.KVOR_mod2_rho_sat_f2_get, _eosWrap.KVOR_mod2_rho_sat_f2_set)
    __swig_setmethods__["omega_f_low"] = _eosWrap.KVOR_mod2_omega_f_low_set
    __swig_getmethods__["omega_f_low"] = _eosWrap.KVOR_mod2_omega_f_low_get
    if _newclass:
        omega_f_low = _swig_property(_eosWrap.KVOR_mod2_omega_f_low_get, _eosWrap.KVOR_mod2_omega_f_low_set)
    __swig_setmethods__["rho_f_low"] = _eosWrap.KVOR_mod2_rho_f_low_set
    __swig_getmethods__["rho_f_low"] = _eosWrap.KVOR_mod2_rho_f_low_get
    if _newclass:
        rho_f_low = _swig_property(_eosWrap.KVOR_mod2_rho_f_low_get, _eosWrap.KVOR_mod2_rho_f_low_set)
    __swig_setmethods__["omega_a_low"] = _eosWrap.KVOR_mod2_omega_a_low_set
    __swig_getmethods__["omega_a_low"] = _eosWrap.KVOR_mod2_omega_a_low_get
    if _newclass:
        omega_a_low = _swig_property(_eosWrap.KVOR_mod2_omega_a_low_get, _eosWrap.KVOR_mod2_omega_a_low_set)
    __swig_setmethods__["rho_a_low"] = _eosWrap.KVOR_mod2_rho_a_low_set
    __swig_getmethods__["rho_a_low"] = _eosWrap.KVOR_mod2_rho_a_low_get
    if _newclass:
        rho_a_low = _swig_property(_eosWrap.KVOR_mod2_rho_a_low_get, _eosWrap.KVOR_mod2_rho_a_low_set)
    __swig_setmethods__["rho_a1"] = _eosWrap.KVOR_mod2_rho_a1_set
    __swig_getmethods__["rho_a1"] = _eosWrap.KVOR_mod2_rho_a1_get
    if _newclass:
        rho_a1 = _swig_property(_eosWrap.KVOR_mod2_rho_a1_get, _eosWrap.KVOR_mod2_rho_a1_set)
    __swig_setmethods__["rho_a2"] = _eosWrap.KVOR_mod2_rho_a2_set
    __swig_getmethods__["rho_a2"] = _eosWrap.KVOR_mod2_rho_a2_get
    if _newclass:
        rho_a2 = _swig_property(_eosWrap.KVOR_mod2_rho_a2_get, _eosWrap.KVOR_mod2_rho_a2_set)
    __swig_setmethods__["rho_a0"] = _eosWrap.KVOR_mod2_rho_a0_set
    __swig_getmethods__["rho_a0"] = _eosWrap.KVOR_mod2_rho_a0_get
    if _newclass:
        rho_a0 = _swig_property(_eosWrap.KVOR_mod2_rho_a0_get, _eosWrap.KVOR_mod2_rho_a0_set)
    __swig_setmethods__["rho_a3"] = _eosWrap.KVOR_mod2_rho_a3_set
    __swig_getmethods__["rho_a3"] = _eosWrap.KVOR_mod2_rho_a3_get
    if _newclass:
        rho_a3 = _swig_property(_eosWrap.KVOR_mod2_rho_a3_get, _eosWrap.KVOR_mod2_rho_a3_set)
    __swig_setmethods__["rho_gamma_low"] = _eosWrap.KVOR_mod2_rho_gamma_low_set
    __swig_getmethods__["rho_gamma_low"] = _eosWrap.KVOR_mod2_rho_gamma_low_get
    if _newclass:
        rho_gamma_low = _swig_property(_eosWrap.KVOR_mod2_rho_gamma_low_get, _eosWrap.KVOR_mod2_rho_gamma_low_set)
    __swig_setmethods__["rho_d"] = _eosWrap.KVOR_mod2_rho_d_set
    __swig_getmethods__["rho_d"] = _eosWrap.KVOR_mod2_rho_d_get
    if _newclass:
        rho_d = _swig_property(_eosWrap.KVOR_mod2_rho_d_get, _eosWrap.KVOR_mod2_rho_d_set)
    __swig_setmethods__["rho_e"] = _eosWrap.KVOR_mod2_rho_e_set
    __swig_getmethods__["rho_e"] = _eosWrap.KVOR_mod2_rho_e_get
    if _newclass:
        rho_e = _swig_property(_eosWrap.KVOR_mod2_rho_e_get, _eosWrap.KVOR_mod2_rho_e_set)
    __swig_setmethods__["rho_width_f"] = _eosWrap.KVOR_mod2_rho_width_f_set
    __swig_getmethods__["rho_width_f"] = _eosWrap.KVOR_mod2_rho_width_f_get
    if _newclass:
        rho_width_f = _swig_property(_eosWrap.KVOR_mod2_rho_width_f_get, _eosWrap.KVOR_mod2_rho_width_f_set)
    __swig_setmethods__["rho_width_power"] = _eosWrap.KVOR_mod2_rho_width_power_set
    __swig_getmethods__["rho_width_power"] = _eosWrap.KVOR_mod2_rho_width_power_get
    if _newclass:
        rho_width_power = _swig_property(_eosWrap.KVOR_mod2_rho_width_power_get, _eosWrap.KVOR_mod2_rho_width_power_set)
    __swig_setmethods__["rho"] = _eosWrap.KVOR_mod2_rho_set
    __swig_getmethods__["rho"] = _eosWrap.KVOR_mod2_rho_get
    if _newclass:
        rho = _swig_property(_eosWrap.KVOR_mod2_rho_get, _eosWrap.KVOR_mod2_rho_set)
    __swig_setmethods__["drho"] = _eosWrap.KVOR_mod2_drho_set
    __swig_getmethods__["drho"] = _eosWrap.KVOR_mod2_drho_get
    if _newclass:
        drho = _swig_property(_eosWrap.KVOR_mod2_drho_get, _eosWrap.KVOR_mod2_drho_set)
    __swig_setmethods__["d2rho"] = _eosWrap.KVOR_mod2_d2rho_set
    __swig_getmethods__["d2rho"] = _eosWrap.KVOR_mod2_d2rho_get
    if _newclass:
        d2rho = _swig_property(_eosWrap.KVOR_mod2_d2rho_get, _eosWrap.KVOR_mod2_d2rho_set)
    __swig_setmethods__["rho_tan_a"] = _eosWrap.KVOR_mod2_rho_tan_a_set
    __swig_getmethods__["rho_tan_a"] = _eosWrap.KVOR_mod2_rho_tan_a_get
    if _newclass:
        rho_tan_a = _swig_property(_eosWrap.KVOR_mod2_rho_tan_a_get, _eosWrap.KVOR_mod2_rho_tan_a_set)
    __swig_setmethods__["rho_tan_b"] = _eosWrap.KVOR_mod2_rho_tan_b_set
    __swig_getmethods__["rho_tan_b"] = _eosWrap.KVOR_mod2_rho_tan_b_get
    if _newclass:
        rho_tan_b = _swig_property(_eosWrap.KVOR_mod2_rho_tan_b_get, _eosWrap.KVOR_mod2_rho_tan_b_set)
    __swig_setmethods__["rho_tan_c"] = _eosWrap.KVOR_mod2_rho_tan_c_set
    __swig_getmethods__["rho_tan_c"] = _eosWrap.KVOR_mod2_rho_tan_c_get
    if _newclass:
        rho_tan_c = _swig_property(_eosWrap.KVOR_mod2_rho_tan_c_get, _eosWrap.KVOR_mod2_rho_tan_c_set)
    __swig_setmethods__["beta1"] = _eosWrap.KVOR_mod2_beta1_set
    __swig_getmethods__["beta1"] = _eosWrap.KVOR_mod2_beta1_get
    if _newclass:
        beta1 = _swig_property(_eosWrap.KVOR_mod2_beta1_get, _eosWrap.KVOR_mod2_beta1_set)
    __swig_setmethods__["c1"] = _eosWrap.KVOR_mod2_c1_set
    __swig_getmethods__["c1"] = _eosWrap.KVOR_mod2_c1_get
    if _newclass:
        c1 = _swig_property(_eosWrap.KVOR_mod2_c1_get, _eosWrap.KVOR_mod2_c1_set)
    __swig_setmethods__["dom"] = _eosWrap.KVOR_mod2_dom_set
    __swig_getmethods__["dom"] = _eosWrap.KVOR_mod2_dom_get
    if _newclass:
        dom = _swig_property(_eosWrap.KVOR_mod2_dom_get, _eosWrap.KVOR_mod2_dom_set)
    __swig_setmethods__["d2om"] = _eosWrap.KVOR_mod2_d2om_set
    __swig_getmethods__["d2om"] = _eosWrap.KVOR_mod2_d2om_get
    if _newclass:
        d2om = _swig_property(_eosWrap.KVOR_mod2_d2om_get, _eosWrap.KVOR_mod2_d2om_set)
    __swig_setmethods__["rho_b_low"] = _eosWrap.KVOR_mod2_rho_b_low_set
    __swig_getmethods__["rho_b_low"] = _eosWrap.KVOR_mod2_rho_b_low_get
    if _newclass:
        rho_b_low = _swig_property(_eosWrap.KVOR_mod2_rho_b_low_get, _eosWrap.KVOR_mod2_rho_b_low_set)
    __swig_setmethods__["rho_a4"] = _eosWrap.KVOR_mod2_rho_a4_set
    __swig_getmethods__["rho_a4"] = _eosWrap.KVOR_mod2_rho_a4_get
    if _newclass:
        rho_a4 = _swig_property(_eosWrap.KVOR_mod2_rho_a4_get, _eosWrap.KVOR_mod2_rho_a4_set)
    __swig_setmethods__["Delta"] = _eosWrap.KVOR_mod2_Delta_set
    __swig_getmethods__["Delta"] = _eosWrap.KVOR_mod2_Delta_get
    if _newclass:
        Delta = _swig_property(_eosWrap.KVOR_mod2_Delta_get, _eosWrap.KVOR_mod2_Delta_set)
    __swig_setmethods__["omega_c"] = _eosWrap.KVOR_mod2_omega_c_set
    __swig_getmethods__["omega_c"] = _eosWrap.KVOR_mod2_omega_c_get
    if _newclass:
        omega_c = _swig_property(_eosWrap.KVOR_mod2_omega_c_get, _eosWrap.KVOR_mod2_omega_c_set)
    __swig_setmethods__["rho_kind"] = _eosWrap.KVOR_mod2_rho_kind_set
    __swig_getmethods__["rho_kind"] = _eosWrap.KVOR_mod2_rho_kind_get
    if _newclass:
        rho_kind = _swig_property(_eosWrap.KVOR_mod2_rho_kind_get, _eosWrap.KVOR_mod2_rho_kind_set)
    __swig_setmethods__["rho_power"] = _eosWrap.KVOR_mod2_rho_power_set
    __swig_getmethods__["rho_power"] = _eosWrap.KVOR_mod2_rho_power_get
    if _newclass:
        rho_power = _swig_property(_eosWrap.KVOR_mod2_rho_power_get, _eosWrap.KVOR_mod2_rho_power_set)
    __swig_setmethods__["omega_kind"] = _eosWrap.KVOR_mod2_omega_kind_set
    __swig_getmethods__["omega_kind"] = _eosWrap.KVOR_mod2_omega_kind_get
    if _newclass:
        omega_kind = _swig_property(_eosWrap.KVOR_mod2_omega_kind_get, _eosWrap.KVOR_mod2_omega_kind_set)
    __swig_setmethods__["omega_b"] = _eosWrap.KVOR_mod2_omega_b_set
    __swig_getmethods__["omega_b"] = _eosWrap.KVOR_mod2_omega_b_get
    if _newclass:
        omega_b = _swig_property(_eosWrap.KVOR_mod2_omega_b_get, _eosWrap.KVOR_mod2_omega_b_set)
    __swig_setmethods__["rho_ld"] = _eosWrap.KVOR_mod2_rho_ld_set
    __swig_getmethods__["rho_ld"] = _eosWrap.KVOR_mod2_rho_ld_get
    if _newclass:
        rho_ld = _swig_property(_eosWrap.KVOR_mod2_rho_ld_get, _eosWrap.KVOR_mod2_rho_ld_set)

    def eta_o(self, arg2):
        return _eosWrap.KVOR_mod2_eta_o(self, arg2)

    def eta_r(self, arg2):
        return _eosWrap.KVOR_mod2_eta_r(self, arg2)

    def eta_s(self, arg2):
        return _eosWrap.KVOR_mod2_eta_s(self, arg2)

    def eta_p(self, arg2):
        return _eosWrap.KVOR_mod2_eta_p(self, arg2)

    def phi_n(self, arg2, arg3):
        return _eosWrap.KVOR_mod2_phi_n(self, arg2, arg3)

    def U(self, arg2):
        return _eosWrap.KVOR_mod2_U(self, arg2)

    def f(self, x):
        return _eosWrap.KVOR_mod2_f(self, x)

    def s(self, f):
        return _eosWrap.KVOR_mod2_s(self, f)

    def s_exp(self, f):
        return _eosWrap.KVOR_mod2_s_exp(self, f)
    __swig_setmethods__["umode"] = _eosWrap.KVOR_mod2_umode_set
    __swig_getmethods__["umode"] = _eosWrap.KVOR_mod2_umode_get
    if _newclass:
        umode = _swig_property(_eosWrap.KVOR_mod2_umode_get, _eosWrap.KVOR_mod2_umode_set)
    __swig_setmethods__["phi_kind"] = _eosWrap.KVOR_mod2_phi_kind_set
    __swig_getmethods__["phi_kind"] = _eosWrap.KVOR_mod2_phi_kind_get
    if _newclass:
        phi_kind = _swig_property(_eosWrap.KVOR_mod2_phi_kind_get, _eosWrap.KVOR_mod2_phi_kind_set)
KVOR_mod2_swigregister = _eosWrap.KVOR_mod2_swigregister
KVOR_mod2_swigregister(KVOR_mod2)

class KVOR_cut(KVOR_mod2):
    __swig_setmethods__ = {}
    for _s in [KVOR_mod2]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KVOR_cut, name, value)
    __swig_getmethods__ = {}
    for _s in [KVOR_mod2]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KVOR_cut, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _eosWrap.new_KVOR_cut()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def eta_r(self, f):
        return _eosWrap.KVOR_cut_eta_r(self, f)

    def eta_s(self, f):
        return _eosWrap.KVOR_cut_eta_s(self, f)

    def U(self, f):
        return _eosWrap.KVOR_cut_U(self, f)
    __swig_setmethods__["f_sigma"] = _eosWrap.KVOR_cut_f_sigma_set
    __swig_getmethods__["f_sigma"] = _eosWrap.KVOR_cut_f_sigma_get
    if _newclass:
        f_sigma = _swig_property(_eosWrap.KVOR_cut_f_sigma_get, _eosWrap.KVOR_cut_f_sigma_set)
    __swig_setmethods__["a_sigma"] = _eosWrap.KVOR_cut_a_sigma_set
    __swig_getmethods__["a_sigma"] = _eosWrap.KVOR_cut_a_sigma_get
    if _newclass:
        a_sigma = _swig_property(_eosWrap.KVOR_cut_a_sigma_get, _eosWrap.KVOR_cut_a_sigma_set)
    __swig_setmethods__["b_sigma"] = _eosWrap.KVOR_cut_b_sigma_set
    __swig_getmethods__["b_sigma"] = _eosWrap.KVOR_cut_b_sigma_get
    if _newclass:
        b_sigma = _swig_property(_eosWrap.KVOR_cut_b_sigma_get, _eosWrap.KVOR_cut_b_sigma_set)
    __swig_setmethods__["c_omega"] = _eosWrap.KVOR_cut_c_omega_set
    __swig_getmethods__["c_omega"] = _eosWrap.KVOR_cut_c_omega_get
    if _newclass:
        c_omega = _swig_property(_eosWrap.KVOR_cut_c_omega_get, _eosWrap.KVOR_cut_c_omega_set)
    __swig_setmethods__["a_omega"] = _eosWrap.KVOR_cut_a_omega_set
    __swig_getmethods__["a_omega"] = _eosWrap.KVOR_cut_a_omega_get
    if _newclass:
        a_omega = _swig_property(_eosWrap.KVOR_cut_a_omega_get, _eosWrap.KVOR_cut_a_omega_set)
    __swig_setmethods__["b_omega"] = _eosWrap.KVOR_cut_b_omega_set
    __swig_getmethods__["b_omega"] = _eosWrap.KVOR_cut_b_omega_get
    if _newclass:
        b_omega = _swig_property(_eosWrap.KVOR_cut_b_omega_get, _eosWrap.KVOR_cut_b_omega_set)
    __swig_destroy__ = _eosWrap.delete_KVOR_cut
    __del__ = lambda self: None
KVOR_cut_swigregister = _eosWrap.KVOR_cut_swigregister
KVOR_cut_swigregister(KVOR_cut)

class KVOR_cut_sigma(KVOR_cut):
    __swig_setmethods__ = {}
    for _s in [KVOR_cut]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KVOR_cut_sigma, name, value)
    __swig_getmethods__ = {}
    for _s in [KVOR_cut]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KVOR_cut_sigma, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _eosWrap.new_KVOR_cut_sigma()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["c_sigma"] = _eosWrap.KVOR_cut_sigma_c_sigma_set
    __swig_getmethods__["c_sigma"] = _eosWrap.KVOR_cut_sigma_c_sigma_get
    if _newclass:
        c_sigma = _swig_property(_eosWrap.KVOR_cut_sigma_c_sigma_get, _eosWrap.KVOR_cut_sigma_c_sigma_set)

    def U(self, f):
        return _eosWrap.KVOR_cut_sigma_U(self, f)
    __swig_destroy__ = _eosWrap.delete_KVOR_cut_sigma
    __del__ = lambda self: None
KVOR_cut_sigma_swigregister = _eosWrap.KVOR_cut_sigma_swigregister
KVOR_cut_sigma_swigregister(KVOR_cut_sigma)

class KVOR_cut_rho(KVOR_cut):
    __swig_setmethods__ = {}
    for _s in [KVOR_cut]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KVOR_cut_rho, name, value)
    __swig_getmethods__ = {}
    for _s in [KVOR_cut]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KVOR_cut_rho, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _eosWrap.new_KVOR_cut_rho()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def eta_r(self, f):
        return _eosWrap.KVOR_cut_rho_eta_r(self, f)
    __swig_setmethods__["c_rho"] = _eosWrap.KVOR_cut_rho_c_rho_set
    __swig_getmethods__["c_rho"] = _eosWrap.KVOR_cut_rho_c_rho_get
    if _newclass:
        c_rho = _swig_property(_eosWrap.KVOR_cut_rho_c_rho_get, _eosWrap.KVOR_cut_rho_c_rho_set)
    __swig_setmethods__["b_rho"] = _eosWrap.KVOR_cut_rho_b_rho_set
    __swig_getmethods__["b_rho"] = _eosWrap.KVOR_cut_rho_b_rho_get
    if _newclass:
        b_rho = _swig_property(_eosWrap.KVOR_cut_rho_b_rho_get, _eosWrap.KVOR_cut_rho_b_rho_set)
    __swig_destroy__ = _eosWrap.delete_KVOR_cut_rho
    __del__ = lambda self: None
KVOR_cut_rho_swigregister = _eosWrap.KVOR_cut_rho_swigregister
KVOR_cut_rho_swigregister(KVOR_cut_rho)

class ImprovedLDParam(KVOR_mod2):
    __swig_setmethods__ = {}
    for _s in [KVOR_mod2]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImprovedLDParam, name, value)
    __swig_getmethods__ = {}
    for _s in [KVOR_mod2]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImprovedLDParam, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _eosWrap.new_ImprovedLDParam()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["ar"] = _eosWrap.ImprovedLDParam_ar_set
    __swig_getmethods__["ar"] = _eosWrap.ImprovedLDParam_ar_get
    if _newclass:
        ar = _swig_property(_eosWrap.ImprovedLDParam_ar_get, _eosWrap.ImprovedLDParam_ar_set)
    __swig_setmethods__["br"] = _eosWrap.ImprovedLDParam_br_set
    __swig_getmethods__["br"] = _eosWrap.ImprovedLDParam_br_get
    if _newclass:
        br = _swig_property(_eosWrap.ImprovedLDParam_br_get, _eosWrap.ImprovedLDParam_br_set)
    __swig_setmethods__["cr"] = _eosWrap.ImprovedLDParam_cr_set
    __swig_getmethods__["cr"] = _eosWrap.ImprovedLDParam_cr_get
    if _newclass:
        cr = _swig_property(_eosWrap.ImprovedLDParam_cr_get, _eosWrap.ImprovedLDParam_cr_set)
    __swig_setmethods__["a_sigma"] = _eosWrap.ImprovedLDParam_a_sigma_set
    __swig_getmethods__["a_sigma"] = _eosWrap.ImprovedLDParam_a_sigma_get
    if _newclass:
        a_sigma = _swig_property(_eosWrap.ImprovedLDParam_a_sigma_get, _eosWrap.ImprovedLDParam_a_sigma_set)
    __swig_setmethods__["f_stop_denom"] = _eosWrap.ImprovedLDParam_f_stop_denom_set
    __swig_getmethods__["f_stop_denom"] = _eosWrap.ImprovedLDParam_f_stop_denom_get
    if _newclass:
        f_stop_denom = _swig_property(_eosWrap.ImprovedLDParam_f_stop_denom_get, _eosWrap.ImprovedLDParam_f_stop_denom_set)
    __swig_setmethods__["power_0"] = _eosWrap.ImprovedLDParam_power_0_set
    __swig_getmethods__["power_0"] = _eosWrap.ImprovedLDParam_power_0_get
    if _newclass:
        power_0 = _swig_property(_eosWrap.ImprovedLDParam_power_0_get, _eosWrap.ImprovedLDParam_power_0_set)
    __swig_setmethods__["power_1"] = _eosWrap.ImprovedLDParam_power_1_set
    __swig_getmethods__["power_1"] = _eosWrap.ImprovedLDParam_power_1_get
    if _newclass:
        power_1 = _swig_property(_eosWrap.ImprovedLDParam_power_1_get, _eosWrap.ImprovedLDParam_power_1_set)
    __swig_setmethods__["f_stop"] = _eosWrap.ImprovedLDParam_f_stop_set
    __swig_getmethods__["f_stop"] = _eosWrap.ImprovedLDParam_f_stop_get
    if _newclass:
        f_stop = _swig_property(_eosWrap.ImprovedLDParam_f_stop_get, _eosWrap.ImprovedLDParam_f_stop_set)

    def eta_r(self, f):
        return _eosWrap.ImprovedLDParam_eta_r(self, f)

    def eta_s(self, f):
        return _eosWrap.ImprovedLDParam_eta_s(self, f)
    __swig_destroy__ = _eosWrap.delete_ImprovedLDParam
    __del__ = lambda self: None
ImprovedLDParam_swigregister = _eosWrap.ImprovedLDParam_swigregister
ImprovedLDParam_swigregister(ImprovedLDParam)

class Walecka(set_const):
    __swig_setmethods__ = {}
    for _s in [set_const]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Walecka, name, value)
    __swig_getmethods__ = {}
    for _s in [set_const]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Walecka, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _eosWrap.new_Walecka()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _eosWrap.delete_Walecka
    __del__ = lambda self: None

    def eta_o(self, arg2):
        return _eosWrap.Walecka_eta_o(self, arg2)

    def eta_r(self, arg2):
        return _eosWrap.Walecka_eta_r(self, arg2)

    def eta_s(self, arg2):
        return _eosWrap.Walecka_eta_s(self, arg2)

    def phi_n(self, arg2, arg3):
        return _eosWrap.Walecka_phi_n(self, arg2, arg3)

    def U(self, arg2):
        return _eosWrap.Walecka_U(self, arg2)

    def eta_p(self, arg2):
        return _eosWrap.Walecka_eta_p(self, arg2)
Walecka_swigregister = _eosWrap.Walecka_swigregister
Walecka_swigregister(Walecka)

class DriverBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DriverBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DriverBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _eosWrap.delete_DriverBase
    __del__ = lambda self: None
    __swig_setmethods__["fname"] = _eosWrap.DriverBase_fname_set
    __swig_getmethods__["fname"] = _eosWrap.DriverBase_fname_get
    if _newclass:
        fname = _swig_property(_eosWrap.DriverBase_fname_get, _eosWrap.DriverBase_fname_set)

    def readEos(self):
        return _eosWrap.DriverBase_readEos(self)
    __swig_setmethods__["E"] = _eosWrap.DriverBase_E_set
    __swig_getmethods__["E"] = _eosWrap.DriverBase_E_get
    if _newclass:
        E = _swig_property(_eosWrap.DriverBase_E_get, _eosWrap.DriverBase_E_set)
    __swig_setmethods__["P"] = _eosWrap.DriverBase_P_set
    __swig_getmethods__["P"] = _eosWrap.DriverBase_P_get
    if _newclass:
        P = _swig_property(_eosWrap.DriverBase_P_get, _eosWrap.DriverBase_P_set)
    __swig_setmethods__["n"] = _eosWrap.DriverBase_n_set
    __swig_getmethods__["n"] = _eosWrap.DriverBase_n_get
    if _newclass:
        n = _swig_property(_eosWrap.DriverBase_n_get, _eosWrap.DriverBase_n_set)
    __swig_setmethods__["count"] = _eosWrap.DriverBase_count_set
    __swig_getmethods__["count"] = _eosWrap.DriverBase_count_get
    if _newclass:
        count = _swig_property(_eosWrap.DriverBase_count_get, _eosWrap.DriverBase_count_set)

    def NofP(self, N):
        return _eosWrap.DriverBase_NofP(self, N)

    def NofE(self, N):
        return _eosWrap.DriverBase_NofE(self, N)

    def EofP(self, N):
        return _eosWrap.DriverBase_EofP(self, N)

    def EofN(self, N):
        return _eosWrap.DriverBase_EofN(self, N)

    def PofN(self, N):
        return _eosWrap.DriverBase_PofN(self, N)
    __swig_setmethods__["lastNstar"] = _eosWrap.DriverBase_lastNstar_set
    __swig_getmethods__["lastNstar"] = _eosWrap.DriverBase_lastNstar_get
    if _newclass:
        lastNstar = _swig_property(_eosWrap.DriverBase_lastNstar_get, _eosWrap.DriverBase_lastNstar_set)
    __swig_setmethods__["lastRstar"] = _eosWrap.DriverBase_lastRstar_set
    __swig_getmethods__["lastRstar"] = _eosWrap.DriverBase_lastRstar_get
    if _newclass:
        lastRstar = _swig_property(_eosWrap.DriverBase_lastRstar_get, _eosWrap.DriverBase_lastRstar_set)
    __swig_setmethods__["lastMstar"] = _eosWrap.DriverBase_lastMstar_set
    __swig_getmethods__["lastMstar"] = _eosWrap.DriverBase_lastMstar_get
    if _newclass:
        lastMstar = _swig_property(_eosWrap.DriverBase_lastMstar_get, _eosWrap.DriverBase_lastMstar_set)
    __swig_setmethods__["lastPstar"] = _eosWrap.DriverBase_lastPstar_set
    __swig_getmethods__["lastPstar"] = _eosWrap.DriverBase_lastPstar_get
    if _newclass:
        lastPstar = _swig_property(_eosWrap.DriverBase_lastPstar_get, _eosWrap.DriverBase_lastPstar_set)
    __swig_setmethods__["lastEstar"] = _eosWrap.DriverBase_lastEstar_set
    __swig_getmethods__["lastEstar"] = _eosWrap.DriverBase_lastEstar_get
    if _newclass:
        lastEstar = _swig_property(_eosWrap.DriverBase_lastEstar_get, _eosWrap.DriverBase_lastEstar_set)
    __swig_setmethods__["nSize"] = _eosWrap.DriverBase_nSize_set
    __swig_getmethods__["nSize"] = _eosWrap.DriverBase_nSize_get
    if _newclass:
        nSize = _swig_property(_eosWrap.DriverBase_nSize_get, _eosWrap.DriverBase_nSize_set)

    def getLastN(self, N):
        return _eosWrap.DriverBase_getLastN(self, N)

    def getLastR(self, N):
        return _eosWrap.DriverBase_getLastR(self, N)

    def getLastM(self, N):
        return _eosWrap.DriverBase_getLastM(self, N)

    def getLastP(self, N):
        return _eosWrap.DriverBase_getLastP(self, N)

    def getLastE(self, N):
        return _eosWrap.DriverBase_getLastE(self, N)
DriverBase_swigregister = _eosWrap.DriverBase_swigregister
DriverBase_swigregister(DriverBase)

class KVDriver(DriverBase):
    __swig_setmethods__ = {}
    for _s in [DriverBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KVDriver, name, value)
    __swig_getmethods__ = {}
    for _s in [DriverBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KVDriver, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _eosWrap.new_KVDriver(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _eosWrap.delete_KVDriver
    __del__ = lambda self: None

    def getName(self):
        return _eosWrap.KVDriver_getName(self)

    def setName(self, name):
        return _eosWrap.KVDriver_setName(self, name)

    def getFname(self):
        return _eosWrap.KVDriver_getFname(self)

    def setFname(self, fname):
        return _eosWrap.KVDriver_setFname(self, fname)

    def NofP(self, arg2):
        return _eosWrap.KVDriver_NofP(self, arg2)

    def NofE(self, arg2):
        return _eosWrap.KVDriver_NofE(self, arg2)

    def EofP(self, arg2):
        return _eosWrap.KVDriver_EofP(self, arg2)

    def EofN(self, arg2):
        return _eosWrap.KVDriver_EofN(self, arg2)

    def PofN(self, arg2):
        return _eosWrap.KVDriver_PofN(self, arg2)

    def lookFor(self, src, what):
        return _eosWrap.KVDriver_lookFor(self, src, what)

    def set(self, E, P, n):
        return _eosWrap.KVDriver_set(self, E, P, n)
KVDriver_swigregister = _eosWrap.KVDriver_swigregister
KVDriver_swigregister(KVDriver)


def star(rho_init, result, D):
    return _eosWrap.star(rho_init, result, D)
star = _eosWrap.star

def star2(rho_init, result, D):
    return _eosWrap.star2(rho_init, result, D)
star2 = _eosWrap.star2

def star_crust(rho_init, result, D, nmin):
    return _eosWrap.star_crust(rho_init, result, D, nmin)
star_crust = _eosWrap.star_crust

def star_crust2(rho_init, result, D, nmin):
    return _eosWrap.star_crust2(rho_init, result, D, nmin)
star_crust2 = _eosWrap.star_crust2

def star_crust_i(rho_init, result, D, nmin):
    return _eosWrap.star_crust_i(rho_init, result, D, nmin)
star_crust_i = _eosWrap.star_crust_i
class func_f_eq_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, func_f_eq_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, func_f_eq_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _eosWrap.func_f_eq_params_n_set
    __swig_getmethods__["n"] = _eosWrap.func_f_eq_params_n_get
    if _newclass:
        n = _swig_property(_eosWrap.func_f_eq_params_n_get, _eosWrap.func_f_eq_params_n_set)
    __swig_setmethods__["dimN"] = _eosWrap.func_f_eq_params_dimN_set
    __swig_getmethods__["dimN"] = _eosWrap.func_f_eq_params_dimN_get
    if _newclass:
        dimN = _swig_property(_eosWrap.func_f_eq_params_dimN_get, _eosWrap.func_f_eq_params_dimN_set)
    __swig_setmethods__["df"] = _eosWrap.func_f_eq_params_df_set
    __swig_getmethods__["df"] = _eosWrap.func_f_eq_params_df_get
    if _newclass:
        df = _swig_property(_eosWrap.func_f_eq_params_df_get, _eosWrap.func_f_eq_params_df_set)
    __swig_setmethods__["C"] = _eosWrap.func_f_eq_params_C_set
    __swig_getmethods__["C"] = _eosWrap.func_f_eq_params_C_get
    if _newclass:
        C = _swig_property(_eosWrap.func_f_eq_params_C_get, _eosWrap.func_f_eq_params_C_set)

    def __init__(self):
        this = _eosWrap.new_func_f_eq_params()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _eosWrap.delete_func_f_eq_params
    __del__ = lambda self: None
func_f_eq_params_swigregister = _eosWrap.func_f_eq_params_swigregister
func_f_eq_params_swigregister(func_f_eq_params)


def f_eq(n, init, res, C):
    return _eosWrap.f_eq(n, init, res, C)
f_eq = _eosWrap.f_eq

def func_f_eq(p, hx, m, _n, adata):
    return _eosWrap.func_f_eq(p, hx, m, _n, adata)
func_f_eq = _eosWrap.func_f_eq

def K(n, C):
    return _eosWrap.K(n, C)
K = _eosWrap.K

def EBind(n, C):
    return _eosWrap.EBind(n, C)
EBind = _eosWrap.EBind

def J(*args):
    return _eosWrap.J(*args)
J = _eosWrap.J

def solve(n0, E0, f0, K0, J0, C, iter, mu_scale):
    return _eosWrap.solve(n0, E0, f0, K0, J0, C, iter, mu_scale)
solve = _eosWrap.solve
class InterpolatedScalings(set_const):
    __swig_setmethods__ = {}
    for _s in [set_const]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterpolatedScalings, name, value)
    __swig_getmethods__ = {}
    for _s in [set_const]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterpolatedScalings, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _eosWrap.new_InterpolatedScalings()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _eosWrap.delete_InterpolatedScalings
    __del__ = lambda self: None

    def U(self, arg2):
        return _eosWrap.InterpolatedScalings_U(self, arg2)

    def phi_n(self, arg2, arg3):
        return _eosWrap.InterpolatedScalings_phi_n(self, arg2, arg3)

    def eta_s(self, arg2):
        return _eosWrap.InterpolatedScalings_eta_s(self, arg2)

    def eta_o(self, arg2):
        return _eosWrap.InterpolatedScalings_eta_o(self, arg2)

    def eta_r(self, arg2):
        return _eosWrap.InterpolatedScalings_eta_r(self, arg2)

    def eta_p(self, arg2):
        return _eosWrap.InterpolatedScalings_eta_p(self, arg2)
    __swig_setmethods__["debug"] = _eosWrap.InterpolatedScalings_debug_set
    __swig_getmethods__["debug"] = _eosWrap.InterpolatedScalings_debug_get
    if _newclass:
        debug = _swig_property(_eosWrap.InterpolatedScalings_debug_get, _eosWrap.InterpolatedScalings_debug_set)

    def set_eta_s(self, f_in, y_in):
        return _eosWrap.InterpolatedScalings_set_eta_s(self, f_in, y_in)

    def set_eta_o(self, f_in, y_in):
        return _eosWrap.InterpolatedScalings_set_eta_o(self, f_in, y_in)

    def set_eta_r(self, f_in, y_in):
        return _eosWrap.InterpolatedScalings_set_eta_r(self, f_in, y_in)

    def set_U(self, f_in, y_in):
        return _eosWrap.InterpolatedScalings_set_U(self, f_in, y_in)
    __swig_setmethods__["rho_akima"] = _eosWrap.InterpolatedScalings_rho_akima_set
    __swig_getmethods__["rho_akima"] = _eosWrap.InterpolatedScalings_rho_akima_get
    if _newclass:
        rho_akima = _swig_property(_eosWrap.InterpolatedScalings_rho_akima_get, _eosWrap.InterpolatedScalings_rho_akima_set)
InterpolatedScalings_swigregister = _eosWrap.InterpolatedScalings_swigregister
InterpolatedScalings_swigregister(InterpolatedScalings)

class SCDelta(set_const):
    __swig_setmethods__ = {}
    for _s in [set_const]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCDelta, name, value)
    __swig_getmethods__ = {}
    for _s in [set_const]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SCDelta, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setDeltaConstants(self, arg2, arg3):
        return _eosWrap.SCDelta_setDeltaConstants(self, arg2, arg3)

    def setDeltaRho(self, X):
        return _eosWrap.SCDelta_setDeltaRho(self, X)

    def setDeltaOmega(self, X):
        return _eosWrap.SCDelta_setDeltaOmega(self, X)

    def setDeltaSigma(self, X):
        return _eosWrap.SCDelta_setDeltaSigma(self, X)
    __swig_setmethods__["offset"] = _eosWrap.SCDelta_offset_set
    __swig_getmethods__["offset"] = _eosWrap.SCDelta_offset_get
    if _newclass:
        offset = _swig_property(_eosWrap.SCDelta_offset_get, _eosWrap.SCDelta_offset_set)

    def setDeltaOnlyConstants(self):
        return _eosWrap.SCDelta_setDeltaOnlyConstants(self)
    __swig_destroy__ = _eosWrap.delete_SCDelta
    __del__ = lambda self: None
SCDelta_swigregister = _eosWrap.SCDelta_swigregister
SCDelta_swigregister(SCDelta)

class KVOR_d(KVOR, SCDelta):
    __swig_setmethods__ = {}
    for _s in [KVOR, SCDelta]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KVOR_d, name, value)
    __swig_getmethods__ = {}
    for _s in [KVOR, SCDelta]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KVOR_d, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _eosWrap.new_KVOR_d()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _eosWrap.delete_KVOR_d
    __del__ = lambda self: None
KVOR_d_swigregister = _eosWrap.KVOR_d_swigregister
KVOR_d_swigregister(KVOR_d)

class Walecka_d(Walecka, SCDelta):
    __swig_setmethods__ = {}
    for _s in [Walecka, SCDelta]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Walecka_d, name, value)
    __swig_getmethods__ = {}
    for _s in [Walecka, SCDelta]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Walecka_d, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _eosWrap.new_Walecka_d()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _eosWrap.delete_Walecka_d
    __del__ = lambda self: None
Walecka_d_swigregister = _eosWrap.Walecka_d_swigregister
Walecka_d_swigregister(Walecka_d)

class MKVOR_d(KVOR_mod2, SCDelta):
    __swig_setmethods__ = {}
    for _s in [KVOR_mod2, SCDelta]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MKVOR_d, name, value)
    __swig_getmethods__ = {}
    for _s in [KVOR_mod2, SCDelta]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MKVOR_d, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _eosWrap.new_MKVOR_d()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _eosWrap.delete_MKVOR_d
    __del__ = lambda self: None
MKVOR_d_swigregister = _eosWrap.MKVOR_d_swigregister
MKVOR_d_swigregister(MKVOR_d)

class KVORcut_d(KVOR_cut, SCDelta):
    __swig_setmethods__ = {}
    for _s in [KVOR_cut, SCDelta]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KVORcut_d, name, value)
    __swig_getmethods__ = {}
    for _s in [KVOR_cut, SCDelta]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KVORcut_d, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _eosWrap.new_KVORcut_d()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _eosWrap.delete_KVORcut_d
    __del__ = lambda self: None
KVORcut_d_swigregister = _eosWrap.KVORcut_d_swigregister
KVORcut_d_swigregister(KVORcut_d)

class KVORcut_sigma_d(KVOR_cut_sigma, SCDelta):
    __swig_setmethods__ = {}
    for _s in [KVOR_cut_sigma, SCDelta]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KVORcut_sigma_d, name, value)
    __swig_getmethods__ = {}
    for _s in [KVOR_cut_sigma, SCDelta]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KVORcut_sigma_d, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _eosWrap.new_KVORcut_sigma_d()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _eosWrap.delete_KVORcut_sigma_d
    __del__ = lambda self: None
KVORcut_sigma_d_swigregister = _eosWrap.KVORcut_sigma_d_swigregister
KVORcut_sigma_d_swigregister(KVORcut_sigma_d)

# This file is compatible with both classic and new-style classes.


